{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n// const API_BASE_URL = 'http://localhost:5000';\nconsole.log(\"API base URL:\", API_BASE_URL);\nclass ApiService {\n  async makeRequest(url, options = {}) {\n    const token = localStorage.getItem(\"token\");\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(`${API_BASE_URL}${url}`, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Có lỗi xảy ra\");\n      }\n      return data;\n    } catch (error) {\n      console.error(\"Lỗi API:\", error);\n      throw error;\n    }\n  }\n\n  // Authentication APIs\n  async register(email, password) {\n    return this.makeRequest(\"/auth/register\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  async login(email, password) {\n    const data = await this.makeRequest(\"/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (data.token) {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n    }\n    return data;\n  }\n\n  // Summarization API các loại tóm tắt api: http://localhost:5000/api/summarize\n  async summarizeText(originalText, summaryType = \"medium\") {\n    return this.makeRequest(\"/summarize\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        original_text: originalText\n        // summary_type: summaryType,\n      })\n    });\n  }\n\n  // Get trạng thái user\n  async getUserStats() {\n    return this.makeRequest(\"/stats\");\n  }\n\n  // API lịch sử\n  async getHistory() {\n    return this.makeRequest(\"/history\");\n  }\n  async saveHistory(originalText, summaryText) {\n    return this.makeRequest(\"/history\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        original_text: originalText,\n        summary_text: summaryText\n      })\n    });\n  }\n  async deleteHistory(id) {\n    return this.makeRequest(`/history/${id}`, {\n      method: \"DELETE\"\n    });\n  }\n\n  // Kiểm tra AI Service health check\n  async checkBackendHealth() {\n    // return this.makeRequest(\"/api/health\")\n    return fetch(\"http://localhost:5000/health\").then(res => res.json());\n  }\n  async checkAIServer() {\n    return fetch(\"http://localhost:6000/health\").then(res => res.json());\n  }\n\n  // Utility methods\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n  }\n  getCurrentUser() {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(\"token\");\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","console","log","ApiService","makeRequest","url","options","token","localStorage","getItem","config","headers","Authorization","response","fetch","data","json","ok","Error","message","error","register","email","password","method","body","JSON","stringify","login","setItem","user","summarizeText","originalText","summaryType","original_text","getUserStats","getHistory","saveHistory","summaryText","summary_text","deleteHistory","id","checkBackendHealth","then","res","checkAIServer","logout","removeItem","getCurrentUser","parse","isAuthenticated","apiService"],"sources":["D:/Projects/TextSummarizer/text-summarizer_v2/ttvb-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n// const API_BASE_URL = 'http://localhost:5000';\nconsole.log(\"API base URL:\", API_BASE_URL);\n\nclass ApiService {\n  async makeRequest(url, options = {}) {\n    const token = localStorage.getItem(\"token\")\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(token && { Authorization: `Bearer ${token}` }),\n        ...options.headers,\n      },\n      ...options,\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${url}`, config)\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Có lỗi xảy ra\")\n      }\n\n      return data\n    } catch (error) {\n      console.error(\"Lỗi API:\", error)\n      throw error\n    }\n  }\n\n  // Authentication APIs\n  async register(email, password) {\n    return this.makeRequest(\"/auth/register\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n    })\n  }\n\n  async login(email, password) {\n    const data = await this.makeRequest(\"/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (data.token) {\n      localStorage.setItem(\"token\", data.token)\n      localStorage.setItem(\"user\", JSON.stringify(data.user))\n    }\n\n    return data\n  }\n\n  // Summarization API các loại tóm tắt api: http://localhost:5000/api/summarize\n  async summarizeText(originalText, summaryType = \"medium\") {\n    return this.makeRequest(\"/summarize\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        original_text: originalText,\n        // summary_type: summaryType,\n      }),\n    })\n  }\n\n  // Get trạng thái user\n  async getUserStats() {\n    return this.makeRequest(\"/stats\")\n  }\n\n  // API lịch sử\n  async getHistory() {\n    return this.makeRequest(\"/history\")\n  }\n\n  async saveHistory(originalText, summaryText) {\n    return this.makeRequest(\"/history\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        original_text: originalText,\n        summary_text: summaryText,\n      }),\n    })\n  }\n\n  async deleteHistory(id) {\n    return this.makeRequest(`/history/${id}`, {\n      method: \"DELETE\",\n    })\n  }\n\n  // Kiểm tra AI Service health check\n  async checkBackendHealth() {\n    // return this.makeRequest(\"/api/health\")\n    return fetch(\"http://localhost:5000/health\").then((res) => res.json())\n  }\n\n  async checkAIServer() {\n    return fetch(\"http://localhost:6000/health\").then(res => res.json());\n  }\n\n  // Utility methods\n  logout() {\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user\")\n  }\n\n  getCurrentUser() {\n    const user = localStorage.getItem(\"user\")\n    return user ? JSON.parse(user) : null\n  }\n\n  isAuthenticated() {\n    return !!localStorage.getItem(\"token\")\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}